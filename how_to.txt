***********************************************************************************************************************************************

TRAIN GAUSSIAN [CLI]
[st]
python train.py -s ./dataset/lerf_ovs/sofa/ -m ./output/sofa_small_3_3 --iterations 15000 --save_iterations 15000 --checkpoint_iterations 15000 --densify_until_iter 4000 --percent_dense 0.000005
[ed]

***********************************************************************************************************************************************

GAUSSIAN VIEWER [CLI]
[st]
./SIBR_viewers/install/bin/SIBR_gaussianViewer_app -m  ./output/sofa_small_3_3
[ed]

***********************************************************************************************************************************************

EXTRACT GAUSSIAN FEATURES (project features to gaussians) [CLI]
[st]
python gaussian_feature_extractor.py -m ./output/sofa_small_3_3 --iteration 15000 --feature_level 1
[ed]

***********************************************************************************************************************************************

RENDER FEATURE MAP and EXTRACT PER VIEW FEATURE (project gaussian features to cameras) [CLI]
[st]
python feature_map_renderer.py -m ./output/sofa_small_3_3 --iteration 15000 --feature_level 1 --skip_test
[ed]

***********************************************************************************************************************************************

EVALUATE GAUSSIAN FEATURES [CLI]
[st]
ln -s ./output/sofa_small_3_3/train/ours_15000_langfeat_1/renders_npy/ ./output/3DOVS/sofa/test/feat_1/renders_npy/
python eval/evaluate_iou_3dovs.py --dataset_name sofa --feat_folder feat --gt_folder ./dataset/lerf_ovs/sofa/
[ed]

***********************************************************************************************************************************************

PROJECT WORDS TO GAUSSIANS [PYTHON]
[st]
import torch
import numpy as np
from sklearn.decomposition import PCA
from plyfile import PlyData, PlyElement
from SigLIP2_encoder import SigLIP2Network as OpenCLIPNetwork
import cv2
import matplotlib.pyplot as plt
import joblib

clip_model = OpenCLIPNetwork("cuda")
pca = joblib.load("./pca_model.joblib")
rpj = joblib.load("./rpj.joblib")
file = "./chkpnt15000_langfeat_1.pth"
model,_ = torch.load(file)
lang_feat = model[7]
xyz = model[1]
dc = model[2]
extra= model[3]
alll = list(model).copy()

emb, factorr = clip_model.encode_text(["ผ้าพันคอ ผ้าพันคอ ตุ๊กตา สีเหลือง"], device="cuda").float(), 20

emb = emb.detach().cpu().numpy()
emb = pca.transform(emb)
emb = torch.from_numpy(emb).cuda()
emb = emb / torch.norm(emb, p=2, dim=1, keepdim=True)
inner = torch.cosine_similarity(emb, lang_feat, dim=1)
idx = torch.topk(inner, k=lang_feat.shape[0]//factorr)
scaled = torch.clamp(inner * 2 - 1, 0, 1)
selected = inner[idx.indices]
selected = (selected - selected.min()) / (selected.max() - selected.min())
with torch.no_grad():
    dc[idx.indices, ...] = torch.tensor([0.0, 10, 0.0], device="cuda")
    extra[idx.indices, ...] = torch.tensor([0.0, 0.0, 0.0], device="cuda")
a = """property float x
property float y
property float z
property float nx
property float ny
property float nz
property float f_dc_0
property float f_dc_1
property float f_dc_2
property float f_rest_0
property float f_rest_1
property float f_rest_2
property float f_rest_3
property float f_rest_4
property float f_rest_5
property float f_rest_6
property float f_rest_7
property float f_rest_8
property float f_rest_9
property float f_rest_10
property float f_rest_11
property float f_rest_12
property float f_rest_13
property float f_rest_14
property float f_rest_15
property float f_rest_16
property float f_rest_17
property float f_rest_18
property float f_rest_19
property float f_rest_20
property float f_rest_21
property float f_rest_22
property float f_rest_23
property float f_rest_24
property float f_rest_25
property float f_rest_26
property float f_rest_27
property float f_rest_28
property float f_rest_29
property float f_rest_30
property float f_rest_31
property float f_rest_32
property float f_rest_33
property float f_rest_34
property float f_rest_35
property float f_rest_36
property float f_rest_37
property float f_rest_38
property float f_rest_39
property float f_rest_40
property float f_rest_41
property float f_rest_42
property float f_rest_43
property float f_rest_44
property float opacity
property float scale_0
property float scale_1
property float scale_2
property float rot_0
property float rot_1
property float rot_2
property float rot_3"""

header = []
for i in a.split("\n"):
    header.append(i.split(" ")[-1])

xyz = model[1].detach().cpu().numpy()
normals = np.zeros_like(xyz)
f_dc = dc.detach().cpu().numpy().reshape(-1, 3)
f_rest = extra.detach().cpu().numpy().reshape(-1, 45)
scale = model[4].detach().cpu().numpy()
rotation = model[5].detach().cpu().numpy()
opacities = model[6].detach().cpu().numpy()

dtype_full = [(attribute, 'f4') for attribute in header]
elements = np.empty(xyz.shape[0], dtype=dtype_full)
attributes = np.concatenate((xyz, normals, f_dc, f_rest, opacities, scale, rotation), axis=1)
elements[:] = list(map(tuple, attributes))
el = PlyElement.describe(elements, 'vertex')
os.makedirs('./point_cloud/iteration_150004', exist_ok=True)
PlyData([el]).write('./point_cloud/iteration_150004/point_cloud.ply')
[ed]

***********************************************************************************************************************************************

GAUSSIAN VIEWER [CLI]
[st]
./SIBR_viewers/install/bin/SIBR_gaussianViewer_app -m  ./output/sofa_small_3_3 --iteration 150004
[ed]

***********************************************************************************************************************************************